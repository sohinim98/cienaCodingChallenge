{"version":3,"sources":["components/Command/Command.js","App.js","serviceWorker.js","index.js"],"names":["Command","useState","graphReset","setGraphReset","serverReady","setServerReady","userCommand","setUserCommand","response","setResponse","setXLabel","yLabel","setYLabel","lowerLimit","setLowerLimit","upperLimit","setUpperLimit","xData","setXData","yData","setYData","useEffect","axios","get","then","res","status","catch","error","console","log","setAction","event","target","id","currentCommand","JSON","stringify","data","substring","getTrace","message","selectedXdata","xdata","filter","elem","index","Number","xlabel","ylabel","ydata","labels","datasets","label","fill","backgroundColor","borderColor","className","type","value","onChange","toUpperCase","placeholder","onClick","width","height","options","scales","xAxes","ticks","display","min","max","stepSize","yAxes","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5381011c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\n\nimport './Command.scss';\n\nexport const Command = () => {\n\n  const [ graphReset, setGraphReset ] = useState(true);\n  const [ serverReady, setServerReady ] = useState(false);\n  const [ userCommand, setUserCommand ] = useState('');\n  const [ response, setResponse ] = useState('$ The response shows up here...');\n  const [ xLabel, setXLabel ] = useState('');\n  const [ yLabel, setYLabel ] = useState('');\n  const [ lowerLimit, setLowerLimit ] = useState('');\n  const [ upperLimit, setUpperLimit ] = useState('');\n  const [ xData, setXData ] = useState([]);\n  const [ yData, setYData ] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get('https://cors-anywhere.herokuapp.com/http://flaskosa.herokuapp.com/cmd/PING')\n      .then(res => {\n        if (res.status === 200) {\n          setServerReady(true);\n        }\n      })\n      .catch(error => {\n        console.log('error', error);\n      })\n  }, [])\n  const makeQuery = () => {\n    axios\n      .get('https://cors-anywhere.herokuapp.com/http://flaskosa.herokuapp.com/cmd/'+userCommand)\n      .then(res => {\n        if (res.status === 200) {\n          setResponse('$ ' + JSON.stringify(res.data).substring(0, 200));\n          if(userCommand === 'START' || userCommand === 'SINGLE') {\n            getTrace();\n          }\n          else if(userCommand === 'STOP') {\n            setGraphReset(true);\n          }\n        }\n      })\n      .catch(error => {\n        console.log('error', error);\n        setResponse('$' + error.message);\n      })\n  }\n  const setAction = (event) => {\n    setUserCommand(event.target.id);\n    let currentCommand = event.target.id;\n    axios\n      .get('https://cors-anywhere.herokuapp.com/http://flaskosa.herokuapp.com/cmd/'+currentCommand)\n      .then(res => {\n        if (res.status === 200) {\n          setResponse('$ ' + JSON.stringify(res.data).substring(0, 200));\n          if(currentCommand === 'START' || currentCommand === 'SINGLE') {\n            getTrace();\n          }\n          else if(currentCommand === 'STOP') {\n            setGraphReset(true);\n          }\n        }\n      })\n      .catch(error => {\n        console.log('error', error);\n        setResponse('$ ' + error.message);\n      })\n  }\n\n  const getTrace = () => {\n    axios\n      .get('https://cors-anywhere.herokuapp.com/http://flaskosa.herokuapp.com/cmd/LIM')\n      .then(res => {\n        if (res.status === 200) {\n          setLowerLimit(res.data.substring(8, 12));\n          setUpperLimit(res.data.substring(13, 18));\n        }\n      })\n      .catch(error => {\n        console.log('error', error);\n      })\n    axios\n      .get('https://cors-anywhere.herokuapp.com/http://flaskosa.herokuapp.com/cmd/TRACE')\n      .then(res => {\n        if (res.status === 200) {\n          setGraphReset(false);\n          const selectedXdata = res.data.xdata.filter((elem, index) => index > Number(lowerLimit) && index < Number(upperLimit));\n          setXLabel(res.data.xlabel);\n          setYLabel(res.data.ylabel);\n          setXData(selectedXdata);\n          setYData(res.data.ydata);\n        }\n      })\n      .catch(error => {\n        console.log('error', error);\n      })\n  }\n  const data = {\n  labels: [xData],\n  datasets: [\n    {\n      label: yLabel,\n      data: yData,\n      fill: true,\n      backgroundColor: \"rgba(75,192,192,0.2)\",\n      borderColor: \"rgba(75,192,192,1)\"\n    }\n  ]\n};\n\n  return (\n    <div className=\"command\">\n      { serverReady ? (\n        <div>\n          <input\n            className=\"command--input\"\n            type=\"text\"\n            value={userCommand}\n            onChange={event => setUserCommand(event.target.value.toUpperCase())}\n            placeholder=\"eg - IDN\"\n          />\n        <div className=\"command--note\">*Note - The query 'SINGLE' takes a while to get a response</div>\n            <button onClick={makeQuery} className=\"commmand-query\">Query</button>\n            <div className=\"command--actions\">\n              <button onClick={setAction} id=\"START\" className=\"command--action\">Start</button>\n              <button onClick={setAction} id=\"STOP\" className=\"command--action\">Stop</button>\n              <button onClick={setAction} id=\"SINGLE\" className=\"command--action\">Single Trace</button>\n            </div>\n            <h1>Instrument Response</h1>\n            <div className=\"command--response\">\n              { response }\n            </div>\n            { graphReset ? 'Type START to draw the graph...' : (\n              <Line\n                width={900}\n                height={550}\n                data={data}\n                options={{\n                  scales: {\n                    xAxes: [\n                      {\n                        ticks: {\n                          display: false,\n                          min: Number(lowerLimit),\n                          max: Number(upperLimit),\n                          stepSize: 0.0001\n                        }\n                      }\n                    ],\n                    yAxes: [\n                      {\n                        ticks: {\n                          max: yData[0],\n                          stepSize: 0.0001\n                        }\n                      }\n                    ]\n                  }\n                }}\n              />\n            )}\n          </div>\n        ) : (\n          'Server not responding...'\n        )}\n    </div>\n  );\n}\n\nexport default Command;\n","import React from 'react';\n\n\nimport './App.scss'\nimport Command from './components/Command/Command'\n\nexport const App = () => {\n\n  return (\n    <Command />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}